-- 회원 테이블을 기준으로 JYP라는 아이디가 구매한 물건의 목록을 조회
SELECT B.USERID, U.USERNAME, B.PRODNAME, U.ADDR, U.MOBILE1 || U.MOBILE2 AS "연락처"            
    FROM USERTBL U
    INNER JOIN BUYTBL B
        ON B.USERID= U.USERID
            WHERE B.USERID = 'JYP';
            
-- 회원 테이블을 기준으로 구매한 회원의 목록을 조회
-- DISTINCT
-- U.USER를 오름차순으로 정렬

SELECT DISTINCT U.USERID, U.USERNAME, U.ADDR
    FROM USERTBL U
    INNER JOIN BUYTBL B
        ON U.USERID = B.USERID
        ORDER BY U.USERID;
        
        
SELECT *
FROM USERTBL
ORDER BY USERID;
        


CREATE TABLE STDTBL(
STDNAME NCHAR(5) NOT NULL PRIMARY KEY,
ADDR NCHAR(2) NOT NULL
);

CREATE TABLE CLUBTBL(
CLUBNAME NCHAR(5) NOT NULL PRIMARY KEY,
ROOMNO NCHAR(4) NOT NULL
);

CREATE SEQUENCE STDCLUBSEQ;

CREATE TABLE STDCLUBTBL(
IDNUM NUMBER(5) NOT NULL PRIMARY KEY,
STDNAME NCHAR(5) NOT NULL,
CLUBNAME NCHAR(5) NOT NULL,
FOREIGN KEY(STDNAME) REFERENCES STDTBL(STDNAME),
FOREIGN KEY(CLUBNAME) REFERENCES CLUBTBL(CLUBNAME)
);   

INSERT INTO STDTBL VALUES('김범수', '경남');
INSERT INTO STDTBL VALUES('성시경', '서울');
INSERT INTO STDTBL VALUES('조용필', '경기');
INSERT INTO STDTBL VALUES('은지원', '경북');
INSERT INTO STDTBL VALUES('바비킴', '서울');

INSERT INTO CLUBTBL VALUES('수영','101호');
INSERT INTO CLUBTBL VALUES('바둑','102호');
INSERT INTO CLUBTBL VALUES('축구','103호');
INSERT INTO CLUBTBL VALUES('봉사','104호');

INSERT INTO STDCLUBTBL VALUES(STDCLUBSEQ.NEXTVAL,'김범수','바둑');
INSERT INTO STDCLUBTBL VALUES(STDCLUBSEQ.NEXTVAL,'김범수','축구');
INSERT INTO STDCLUBTBL VALUES(STDCLUBSEQ.NEXTVAL,'조용필','축구');
INSERT INTO STDCLUBTBL VALUES(STDCLUBSEQ.NEXTVAL,'은지원','축구');
INSERT INTO STDCLUBTBL VALUES(STDCLUBSEQ.NEXTVAL,'은지원','봉사');
INSERT INTO STDCLUBTBL VALUES(STDCLUBSEQ.NEXTVAL,'바비킴','봉사');

-- 학생 테이블, 동아리 테이블, 학생 동아리 테이블을 이용해서 학생을 기준으로
-- 학생 이름/지역/가입한 클럽
SELECT S.STDNAME, S.ADDR, C.CLUBNAME, C.ROOMNO
    FROM STDTBL S
    INNER JOIN STDCLUBTBL SC
        ON S.STDNAME = SC.STDNAME
    INNER JOIN CLUBTBL C
        ON SC.CLUBNAME = C.CLUBNAME
    ORDER BY S.STDNAME;   
    
-- 동아리를 기준으로 학생의 목록을
SELECT S.STDNAME, S.ADDR, C.CLUBNAME, C.ROOMNO
    FROM STDTBL S
    INNER JOIN STDCLUBTBL SC
        ON S.STDNAME = SC.STDNAME
    INNER JOIN CLUBTBL C
        ON SC.CLUBNAME = C.CLUBNAME
    ORDER BY C.CLUBNAME;

    
-- OUTER JOIN(외부 조인)
-- 전체 회원의 구매기록 조회, 던 구매 기록이 없는 회원도 조회 출력
SELECT U.USERID, U.USERNAME, B.PRODNAME, U.ADDR, U.MOBILE1 || U.MOBILE2 AS "연락처"            
    FROM USERTBL U
    LEFT OUTER JOIN BUYTBL B --OUTER 생략 가능
        ON U.USERID = B.USERID
    ORDER BY U.USERID;
        
SELECT U.USERID, U.USERNAME, B.PRODNAME, U.ADDR, U.MOBILE1 || U.MOBILE2 AS "연락처"            
    FROM USERTBL U
    RIGHT OUTER JOIN BUYTBL B --OUTER 생략 가능
        ON U.USERID = B.USERID
    ORDER BY U.USERID;            
    
-- 한 번도 구매한 적이 없는 회원 조회
SELECT U.USERID, U.USERNAME, B.PRODNAME, U.ADDR, U.MOBILE1 || U.MOBILE2 AS "연락처"            
    FROM USERTBL U
    LEFT OUTER JOIN BUYTBL B --OUTER 생략 가능
        ON U.USERID = B.USERID
    WHERE B.PRODNAME IS NULL
    ORDER BY U.USERID;            
    
-- OUTER JOIN 으로 동아리에 가입하지 않은 학생도 출력되도록 조회
SELECT *
    FROM STDTBL S
    LEFT OUTER JOIN STDCLUBTBL SC
        ON S.STDNAME = SC.STDNAME
    LEFT OUTER JOIN CLUBTBL C
        ON SC.CLUBNAME = C.CLUBNAME
    ORDER BY S.STDNAME;
    
-- 동아리를 기준으로 가입된 학생을 출력하되 가입 학생이 하나도 없는
-- 동아리도 출력
SELECT C.CLUBNAME, SC.STDNAME
    FROM STDTBL S
    LEFT OUTER JOIN STDCLUBTBL SC
        ON SC.STDNAME = S.STDNAME
    RIGHT OUTER JOIN CLUBTBL C
        ON SC.CLUBNAME = C.CLUBNAME
    ORDER BY C.CLUBNAME;

-- 없는 경우도 모두 출력
SELECT S.STDNAME, C.CLUBNAME
    FROM STDTBL S
    FULL OUTER JOIN STDCLUBTBL SC
        ON SC.STDNAME = S.STDNAME
    FULL OUTER JOIN CLUBTBL C
        ON SC.CLUBNAME = C.CLUBNAME
    ORDER BY C.CLUBNAME;  
    
-- NOT IN
-- 첫 번째 쿼리의 결과 중에서 두 번째 쿼리에 해당하는 것을 제외
SELECT USERNAME, CONCAT(MOBILE1, MOBILE2) AS "전화번호"
FROM USERTBL
WHERE USERNAME NOT IN (SELECT USERNAME FROM USERTBL WHERE MOBILE1 IS NULL); 

-- IN
-- 첫 번째 쿼리의 결과 중에서 두 번째 쿼리에 해당하는 것만 조회
SELECT USERNAME, CONCAT(MOBILE1, MOBILE2) AS "전화번호"
FROM USERTBL
WHERE USERNAME IN (SELECT USERNAME FROM USERTBL WHERE MOBILE2 IS NULL); 

SELECT *
FROM USERTBL