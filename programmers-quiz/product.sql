다음은 어느 의류 쇼핑몰에서 판매 중인 상품들의 정보를 담은 PRODUCT 테이블입니다. PRODUCT 테이블은 아래와 같은 구조로 되어있으며, PRODUCT_ID, PRODUCT_CODE, PRICE는 각각 상품 ID, 상품코드, 판매가를 나타냅니다.

Column name Type  Nullable
PRODUCT_ID  INTEGER FALSE
PRODUCT_CODE  VARCHAR(8)  FALSE
PRICE INTEGER FALSE
상품 별로 중복되지 않는 8자리 상품코드 값을 가지며, 앞 2자리는 카테고리 코드를 의미합니다.

CREATE TABLE IF NOT EXISTS PRODUCT (
PRODUCT_ID INTEGER NOT NULL PRIMARY KEY,
PRODUCT_CODE VARCHAR(8) NOT NULL,
PRICE INTEGER NOT NULL
);

INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_CODE, PRICE) VALUES (1, 'A1000001', 10000);
INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_CODE, PRICE) VALUES (2, 'A2000005', 9000);
INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_CODE, PRICE) VALUES (3, 'C3000002', 22000);
INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_CODE, PRICE) VALUES (4, 'C3000006', 15000);
INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_CODE, PRICE) VALUES (5, 'C3000010', 30000);
INSERT INTO PRODUCT (PRODUCT_ID, PRODUCT_CODE, PRICE) VALUES (6, 'K1000023', 17000);

OFFLINE_SALE 테이블은 아래와 같은 구조로 되어있으며 
OFFLINE_SALE_ID, PRODUCT_ID, SALES_AMOUNT, SALES_DATE는 각각 오프라인 상품 판매 ID, 상품 ID, 판매량, 판매일을 나타냅니다.

Column name Type  Nullable
OFFLINE_SALE_ID INTEGER FALSE
PRODUCT_ID  INTEGER FALSE
SALES_AMOUNT  INTEGER FALSE
SALES_DATE  DATE  FALSE
동일한 날짜, 상품 ID 조합에 대해서는 하나의 판매 데이터만 존재합니다.

CREATE TABLE IF NOT EXISTS OFFLINE_SALE (
  OFFLINE_SALE_ID INTEGER NOT NULL PRIMARY KEY,
  PRODUCT_ID  INTEGER NOT NULL,
  SALES_AMOUNT  INTEGER NOT NULL, 
  SALES_DATE  DATE NOT NULL 
);

INSERT INTO OFFLINE_SALE (OFFLINE_SALE_ID, PRODUCT_ID, SALES_AMOUNT, SALES_DATE) VALUES (1, 1, 2, '2022-02-21');
INSERT INTO OFFLINE_SALE (OFFLINE_SALE_ID, PRODUCT_ID, SALES_AMOUNT, SALES_DATE) VALUES (2, 1, 2, '2022-03-02');
INSERT INTO OFFLINE_SALE (OFFLINE_SALE_ID, PRODUCT_ID, SALES_AMOUNT, SALES_DATE) VALUES (3, 3, 3, '2022-05-01');
INSERT INTO OFFLINE_SALE (OFFLINE_SALE_ID, PRODUCT_ID, SALES_AMOUNT, SALES_DATE) VALUES (4, 2, 1, '2022-05-24');
INSERT INTO OFFLINE_SALE (OFFLINE_SALE_ID, PRODUCT_ID, SALES_AMOUNT, SALES_DATE) VALUES (5, 1, 2, '2022-07-14');
INSERT INTO OFFLINE_SALE (OFFLINE_SALE_ID, PRODUCT_ID, SALES_AMOUNT, SALES_DATE) VALUES (6, 2, 1, '2022-09-22');

-- 테이블 확인
SELECT * FROM PRODUCT;
SELECT * FROM OFFLINE_SALE;

-- 데이터 비우기
TRUNCATE PRODUCT;
TRUNCATE OFFLINE_SALE;

-- PRODUCT 테이블에서 판매 중인 상품 중 가장 높은 판매가를 출력하는 SQL문을 작성해주세요. 이때 컬럼명은 MAX_PRICE로 지정해주세요.
SELECT MAX(PRICE)
  FROM PRODUCT;
  
-- PRODUCT 테이블에서 상품 카테고리 코드(PRODUCT_CODE 앞 2자리) 별 상품 개수를 출력하는 SQL문을 작성해주세요. 결과는 상품 카테고리 코드를 기준으로 오름차순 정렬해주세요.
SELECT SUBSTR(PRODUCT_CODE, 1, 2) AS CATEGORY
     , COUNT(*) AS PRODUCT
  FROM PRODUCT
 GROUP BY CATEGORY;
 
-- PRODUCT 테이블과 OFFLINE_SALE 테이블에서 상품코드 별 매출액(판매가 * 판매량) 합계를 출력하는 SQL문을 작성해주세요. 
-- 결과는 매출액을 기준으로 내림차순 정렬해주시고 매출액이 같다면 상품코드를 기준으로 오름차순 정렬해주세요.
SELECT PRODUCT_CODE
     , SUM(P.PRICE * OS.SALES_AMOUNT) AS SALES
  FROM PRODUCT P
  JOIN OFFLINE_SALE OS ON P.PRODUCT_ID = OS.PRODUCT_ID
 GROUP BY P.PRODUCT_CODE
 ORDER BY;
 