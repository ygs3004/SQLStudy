다음은 식품의 정보를 담은 FOOD_PRODUCT 테이블입니다. FOOD_PRODUCT 테이블은 다음과 같으며 
PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE는 식품 ID, 식품 이름, 식품 코드, 식품분류, 식품 가격을 의미합니다.

Column name Type  Nullable
PRODUCT_ID  VARCHAR(10) FALSE
PRODUCT_NAME  VARCHAR(50) FALSE
PRODUCT_CD  VARCHAR(10) TRUE
CATEGORY  VARCHAR(10) TRUE
PRICE NUMBER TRUE

CREATE TABLE IF NOT EXISTS FOOD_PRODUCT (
  PRODUCT_ID VARCHAR(10) NOT NULL PRIMARY KEY,
  PRODUCT_NAME VARCHAR(50) NOT NULL,
  PRODUCT_CD VARCHAR(10),
  CATEGORY VARCHAR(10),
  PRICE INT
);

INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0018', '맛있는고추기름', 'CD_OL00008', '식용유', 6100);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0019', '맛있는카놀라유', 'CD_OL00009', '식용유', 5100);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0020', '맛있는산초유',  'CD_OL00010', '식용유', 6500);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0021', '맛있는케첩', 'CD_OL00001', '소스', 4500);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0022', '맛있는마요네즈', 'CD_OL00002', '소스', 4700);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0011', '맛있는콩기름', 'CD_OL00001', '식용유', 4880);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0012', '맛있는올리브유', 'CD_OL00002', '식용유', 7200);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0013', '맛있는포도씨유', 'CD_OL00003', '식용유', 5950);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0014', '맛있는마조유', 'CD_OL00004', '식용유', 8950);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0015', '맛있는화조유', 'CD_OL00005', '식용유', 8800);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0016', '맛있는참기름', 'CD_OL00006', '식용유', 7100);
INSERT INTO FOOD_PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE) VALUES ('P0017', '맛있는들기름', 'CD_OL00007', '식용유', 7900);

-- 테이블 확인
SELECT * FROM FOOD_PRODUCT;

-- 데이터 비우기
TRUNCATE FOOD_PRODUCT;

다음은 식품공장의 주문정보를 담은 FOOD_ORDER 테이블입니다. FOOD_ORDER 테이블은 다음과 같으며 
ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE,OUT_DATE,FACTORY_ID, WAREHOUSE_ID는 
각각 주문 ID, 제품 ID, 주문양, 생산일자, 입고일자, 출고일자, 공장 ID, 창고 ID를 의미합니다.

Column name Type  Nullable
ORDER_ID  VARCHAR(10) FALSE
PRODUCT_ID  VARCHAR(5)  FALSE
AMOUNT  NUMBER  FALSE
PRODUCE_DATE  DATE  TRUE
IN_DATE DATE  TRUE
OUT_DATE  DATE  TRUE
FACTORY_ID  VARCHAR(10) FALSE
WAREHOUSE_ID  VARCHAR(10) FALSE

CREATE TABLE IF NOT EXISTS FOOD_ORDER (
  ORDER_ID  VARCHAR(10) NOT NULL PRIMARY KEY,
  PRODUCT_ID  VARCHAR(5) NOT NULL,
  AMOUNT INT NOT NULL,
  PRODUCE_DATE DATE,
  IN_DATE DATE,
  OUT_DATE DATE,
  FACTORY_ID VARCHAR(10) NOT NULL,
  WAREHOUSE_ID   VARCHAR(10) NOT NULL
);

INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000051', 'P0002', 4000, '2022-04-01', '2022-04-21', '2022-04-21', 'FT19970003',  'WH0005');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000052', 'P0003', 2500, '2022-04-10', '2022-04-27', '2022-04-27', 'FT19970003',  'WH0006');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000053', 'P0005', 6200, '2022-04-15', '2022-04-30', '2022-05-01', 'FT19940003',  'WH0003');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000054', 'P0006', 1000, '2022-04-21', '2022-04-30', NULL, 'FT19940003', 'WH0009');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000055', 'P0008', 1500, '2022-04-25', '2022-05-11', '2022-05-11', 'FT19980003', 'WH0009');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000056', 'P0012', 1000, '2022-04-04', '2022-04-21', '2022-04-25', 'FT19980002', 'WH0032');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000057', 'P0014', 2500, '2022-04-14', '2022-04-27', '2022-05-01', 'FT19980002', 'WH0033');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000058', 'P0017', 1200, '2022-05-19', '2022-05-28', '2022-05-28', 'FT20070002', 'WH0033');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000059', 'P0017', 1000, '2022-05-24', '2022-05-30', '2022-05-30', 'FT20070002', 'WH0038');
INSERT INTO FOOD_ORDER (ORDER_ID, PRODUCT_ID, AMOUNT, PRODUCE_DATE, IN_DATE, OUT_DATE, FACTORY_ID, WAREHOUSE_ID) VALUES('OD00000060', 'P0019', 2000, '2022-05-29', '2022-06-08', '2022-06-08', 'FT20070002', 'WH0035');

-- 테이블 확인
SELECT * FROM FOOD_ORDER;

-- 데이터 비우기
TRUNCATE FOOD_ORDER;

-- FOOD_PRODUCT 테이블에서 가격이 제일 비싼 식품의 식품 ID, 식품 이름, 식품 코드, 식품분류, 식품 가격을 조회하는 SQL문을 작성해주세요.
SELECT PRODUCT_ID
      ,PRODUCT_NAME
      ,PRODUCT_CD
      ,CATEGORY
      ,PRICE
  FROM FOOD_PRODUCT
 WHERE PRICE = (SELECT MAX(PRICE) FROM FOOD_PRODUCT);
 
 
-- FOOD_ORDER 테이블에서 5월 1일을 기준으로 주문 ID, 제품 ID, 출고일자, 출고여부를 조회하는 SQL문을 작성해주세요. 
-- 출고여부는 5월 1일까지 출고완료로 이 후 날짜는 출고 대기로 미정이면 출고미정으로 출력해주시고, 결과는 주문 ID를 기준으로 오름차순 정렬해주세요.
SELECT ORDER_ID
     , PRODUCT_ID
     , DATE_FORMAT(OUT_DATE, '%Y-%m-%d')
     , (CASE WHEN OUT_DATE <= '2022-05-01' THEN '출고완료'
             WHEN OUT_DATE > '2022-05-01' THEN '출고대기'
        ELSE '출고미정' END) AS 출고여부
  FROM FOOD_ORDER
 ORDER BY ORDER_ID;

--FOOD_PRODUCT와 FOOD_ORDER 테이블에서 생산일자가 2022년 5월인 식품들의 식품 ID, 식품 이름, 총매출을 조회하는 SQL문을 작성해주세요.
--이때 결과는 총매출을 기준으로 내림차순 정렬해주시고 총매출이 같다면 식품 ID를 기준으로 오름차순 정렬해주세요. 

SELECT FO.PRODUCT_ID 
     , FP.PRODUCT_NAME 
     , SUM(FP.PRICE * FO.AMOUNT) AS TOTAL_SALE
  FROM FOOD_PRODUCT FP
  JOIN FOOD_ORDER FO ON FO.PRODUCT_ID = FP.PRODUCT_ID
 WHERE DATE_FORMAT(FO.PRODUCE_DATE, '%Y-%m') = '2022-05'
 GROUP BY FP.PRODUCT_ID
 ORDER BY TOTAL_SALE DESC, FO.PRODUCT_ID;
 
-- FOOD_PRODUCT 테이블에서 식품분류별로 가격이 제일 비싼 식품의 분류, 가격, 이름을 조회하는 SQL문을 작성해주세요. 
-- 이때 식품분류가 '과자', '국', '김치', '식용유'인 경우만 출력시켜 주시고 결과는 식품 가격을 기준으로 내림차순 정렬해주세요.
SELECT FP.CATEGORY AS CATEGORY
     , FP.PRICE AS MAX_PRICE
     , FP.PRODUCT_NAME AS PRODUCT_NAME
  FROM FOOD_PRODUCT FP
  JOIN (SELECT CATEGORY
             , MAX(PRICE) MAX_PRICE
          FROM FOOD_PRODUCT
         GROUP BY CATEGORY) FP2 
    ON FP.PRICE = FP2.MAX_PRICE
    ON FP.CATEGORY = FP2.CATEGORY
 WHERE FP2.CATEGORY IN('과자', '국', '김치', '식용유')
 ORDER BY MAX_PRICE DESC;
 
SELECT FP.CATEGORY AS CATEGORY
     , FP.PRICE AS MAX_PRICE
     , FP.PRODUCT_NAME AS PRODUCT_NAME
  FROM FOOD_PRODUCT FP
  JOIN (SELECT CATEGORY
             , MAX(PRICE) MAX_PRICE
          FROM FOOD_PRODUCT
         GROUP BY CATEGORY) FP2 
    ON FP.PRICE = FP2.MAX_PRICE
   AND FP.CATEGORY = FP2.CATEGORY
 WHERE FP2.CATEGORY IN('과자', '국', '김치', '식용유')
 ORDER BY MAX_PRICE DESC;
